import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-forms-laravel',
  template: `
    <h1>ğŸ“Œ Partie 3: Formulaires et Validation en Laravel</h1>
    <p>
      Dans cette section, nous allons voir comment gÃ©rer les formulaires et la
      validation des donnÃ©es dans Laravel. L'objectif est de garantir que les
      entrÃ©es utilisateur sont sÃ©curisÃ©es et respectent les rÃ¨gles dÃ©finies
      avant d'Ãªtre traitÃ©es dans l'application.
    </p>
    <h2>ğŸŸ¢ 1. OÃ¹ Ã©crire les validations ?</h2>
    <p>
      Il existe trois mÃ©thodes principales pour valider un formulaire en Laravel
      :
    </p>
    <h3>ğŸ”¹ 1.1 Validation dans le contrÃ´leur avec $request->validate()</h3>
    <p>
      C'est la mÃ©thode la plus rapide et simple. Elle est idÃ©ale pour des
      validations lÃ©gÃ¨res.
    </p>
    <pre class="tab">public function store(Request $request)
&#123;
    $validatedData = $request-&#62;validate([
        'nom' =&#62; 'required|string|max:255',
        'email' =&#62; 'required|email|unique:users,email',
        'age' =&#62; 'nullable|integer|min:18',
    ]);

    // Traitement aprÃ¨s validation rÃ©ussie...
&#125;</pre>

<h3>ğŸ”¹ 1.2 Validation avec une Form Request Class</h3>
<p>Si une validation est longue ou rÃ©utilisable, il est prÃ©fÃ©rable d'utiliser une classe dÃ©diÃ©e.</p>

<h4>ğŸ”¸ 1.2.1 CrÃ©ation de la classe</h4>
<p>ExÃ©cutez la commande suivante pour gÃ©nÃ©rer une classe de validation :</p>
<pre class="tab">php artisan make:request UserRequest</pre>
<h4>ğŸ”¸ 1.2.2 DÃ©finition des rÃ¨gles dans la classe</h4>
<p>Dans app/Http/Requests/UserRequest.php :</p>
<pre class="tab">namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class UserRequest extends FormRequest
&#123;
    public function authorize()
    &#123;
        return true; // Mettre false pour restreindre l'accÃ¨s
    &#125;

    public function rules()
    &#123;
        return [
            'nom' =&#62; 'required|string|max:255',
            'email' =&#62; 'required|email|unique:users,email',
            'age' =&#62; 'nullable|integer|min:18',
            'photo' =&#62; 'nullable|image|mimes:jpg,jpeg,png|max:2048',
        ];
    &#125;
&#125;</pre>
<h4>ğŸ”¸ 1.2.3 Utilisation dans le contrÃ´leur</h4>
<pre class="tab">public function store(UserRequest $request)
&#123;
    // Les donnÃ©es sont validÃ©es automatiquement
    User::create($request-&#62;validated());

    return redirect()-&#62;back()-&#62;with('success', 'Utilisateur crÃ©Ã© avec succÃ¨s');
&#125;
</pre>
<h2>ğŸŸ¢ 2. Validation de chaque type de donnÃ©es</h2>
<p>Nous allons voir comment valider diffÃ©rents types de champs dans un formulaire Laravel.</p>
<h3>ğŸ”¹ 2.1 Validation des chaÃ®nes de caractÃ¨res (string, texte, nom, etc.)</h3>
<pre class="tab">'nom' => 'required|string|max:255',
'description' => 'nullable|string|min:10',
</pre>
<p>Explication :</p>
<ul>
    <li>required â†’ Le champ est obligatoire.</li>
    <li>string â†’ Doit Ãªtre une chaÃ®ne de caractÃ¨res.</li>
    <li>max:255 â†’ Limite Ã  255 caractÃ¨res.</li>
    <li>min:10 â†’ Minimum 10 caractÃ¨res.</li>
    <li>nullable â†’ Peut Ãªtre null  </li>
</ul>
<h3>ğŸ”¹ 2.2 Validation des nombres (integer, decimal, etc.)</h3>
<pre class="tab">'age' => 'required|integer|min:18|max:99',
'prix' => 'required|numeric|min:0.01',</pre>
<p>Explication :</p>
<ul>
    <li>integer â†’ Doit Ãªtre un nombre entier.</li>
    <li>numeric â†’ Doit Ãªtre un nombre (entier ou dÃ©cimal).</li>
    <li>min:18 â†’ Minimum 18.</li>
    <li>max:99 â†’ Maximum 99.</li>
    <li>min:0.01 â†’ Minimum 0.01.</li>
</ul>
<h3>ğŸ”¹ 2.3 2.3 Validation des emails et mots de passe</h3>
<pre class="tab">'email' => 'required|email|unique:users,email',
'password' => 'required|string|min:8|confirmed',</pre>
<p>Explication :</p>
<ul>
    <li>email â†’ Doit Ãªtre une adresse email valide.</li>
    <li>unique:users,email â†’ VÃ©rifie que l'email n'existe pas dÃ©jÃ  dans la table users</li>
    <li>required â†’ obligatoire </li>
    <li>string â†’ Doit Ãªtre une chaÃ®ne de caractÃ¨res.</li>
    <li>min:8 â†’ Minimum 8 caractÃ¨res.</li>
    <li>confirmed â†’ Doit Ãªtre confirmÃ© par un champ de confirmation.</li>
</ul>
<h3>ğŸ”¹ 2.4 Validation des fichiers (images, documents, etc.)</h3>
<pre class="tab">'photo' => 'nullable|image|mimes:jpg,jpeg,png|max:2048',
'pdf' => 'required|file|mimes:pdf|max:4096',</pre>
<p>Explication :</p>
<ul>
    <li>nullable â†’ Peut Ãªtre null.</li>
    <li>image â†’ Doit Ãªtre une image.</li>
    <li>file â†’ Doit Ãªtre un fichier.</li>
    <li>mimes:jpg,jpeg,png â†’ Extensions autorisÃ©es.</li>
    <li>max:2048 â†’ Taille maximale en kilo-octets.</li>
</ul>
<h3>ğŸ”¹ 2.5 Validation des dates et heures</h3>
<pre class="tab">'date' => 'required|date|after:today',
'heure' => 'required|date_format:H:i',</pre>
<p>Explication :</p>
<ul>
    <li>date â†’ Doit Ãªtre une date valide.</li>
    <li>after:today â†’ Doit Ãªtre aprÃ¨s la date actuelle.</li>
    <li>date_format:H:i â†’ Doit Ãªtre au format heure:minute.</li>
</ul>
<h3>ğŸ”¹ 2.5 Validation des sÃ©lections (dropdown, radio, checkbox)</h3>
<pre class="tab">'genre' => 'required|in:homme,femme',
'terms' => 'accepted',
'langues' => 'required|array|min:1',
'roles' => 'required|array|size:2',</pre>
<p>Explication :</p>
<ul>
    <li>in:homme,femme â†’ Seules ces valeurs sont acceptÃ©es</li>
    <li>accepted â†’ Doit Ãªtre acceptÃ© (checkbox).</li>
    <li>array â†’ Doit Ãªtre un tableau.</li>
    <li>min:1 â†’ Minimum 1 Ã©lÃ©ment.</li>
    <li>size:2 â†’ Doit contenir exactement 2 Ã©lÃ©ments.</li>
</ul>
<h2>ğŸŸ¢ 3. Messages d'erreur personnalisÃ©s</h2>
<h3>ğŸ”¹ 3.1 Messages d'erreur personnalisÃ©s dans $request->validate()</h3>
<p>Il est possible de personnaliser les messages d'erreur directement dans la mÃ©thode validate :</p>
<pre class="tab">
$request->validate([
    'nom' => 'required|string|max:255',
    'email' => 'required|email|unique:users,email',
], [
    'nom.required' => 'Le nom est obligatoire.',
    'email.required' => 'L\'adresse e-mail est obligatoire.',
    'email.unique' => 'Cet e-mail est dÃ©jÃ  pris.',
]);</pre>
<h3>ğŸ”¹ 3.2 3.2 Messages d'erreur personnalisÃ©s dans Form Request Class</h3>
<p>Il est Ã©galement possible de dÃ©finir des messages personnalisÃ©s dans la classe de validation :</p>
<pre class="tab">public function messages()
&#123;
    return [
        'nom.required' =&#62; 'Le nom ne peut pas Ãªtre vide.',
        'email.unique' =&#62; 'Cet e-mail est dÃ©jÃ  enregistrÃ©.',
    ];
&#125;</pre>
<h2>ğŸŸ¢ 4. Affichage des erreurs dans la vue Blade</h2>
<p>Pour afficher les erreurs de validation dans une vue Blade, utilisez la mÃ©thode $errors :</p>
<p>Dans la vue Blade :</p>
<pre class="tab">&#64;if ($errors-&#62;any())
    &#60;div class="alert alert-danger"&#62;
        &#60;ul&#62;
            &#64;foreach ($errors-&#62;all() as $error)
                &#60;li&#62;&#123; &#123; $error &#125; &#125;&#60;/li&#62;
            &#64;endforeach
        &#60;/ul&#62;
    &#60;/div&#62;
&#64;endif</pre>
<p>Pour un champ spÃ©cifique :</p>
<pre class="tab">&#60;input type="text" name="nom" class="form-control &#64;error('nom') is-invalid &#64;enderror"&#62;
&#64;error('nom')
    &#60;div class="invalid-feedback"&#62;&#123; &#123; $message &#125; &#125;&#60;/div&#62;
&#64;enderror
</pre>
<h2>ğŸŸ¢ 5. Gestion avancÃ©e des erreurs (API & AJAX)</h2>
<p>Dans le cas dâ€™une API REST, Laravel retourne automatiquement un JSON avec les erreurs :</p>
<pre class="tab">&#123;
    "message": "The given data was invalid.",
    "errors": &#123;
        "email": ["L'adresse e-mail est dÃ©jÃ  utilisÃ©e."]
    &#125;
&#125;
</pre>
<h3>ğŸ”¹ 5.1 Gestion des erreurs dans un contrÃ´leur API</h3>
<p>Dans le contrÃ´leur :</p>
<pre class="tab">public function store(Request $request)
&#123;
    $validator = Validator::make($request-&#62;all(), [
        'email' =&#62; 'required|email|unique:users,email',
    ]);

    if ($validator-&#62;fails()) &#123;
        return response()-&#62;json([
            'message' =&#62; 'DonnÃ©es invalides',
            'errors' =&#62; $validator-&#62;errors()
        ], 422);
    &#125;

    // Traitement si la validation est rÃ©ussie
&#125;</pre>
<h3>ğŸ”¹ 5.2 Affichage des erreurs cÃ´tÃ© frontend (AJAX / Vue.js / React)</h3>
<p>Dans le code JavaScript :</p>
<pre class="tab">axios.post('/api/register', formData)
    .catch(error =&#62; &#123;
        console.log(error.response.data.errors);
    &#125;);</pre>
<h2>ğŸŸ¢ 6. Notifications et Flash Messages</h2>
<p>Pour informer lâ€™utilisateur aprÃ¨s une action (succÃ¨s, Ã©chec), on utilise les messages de session.
</p>
<h3>ğŸ”¹ 6.1 DÃ©finir un message dans le contrÃ´leur</h3>
<p>Dans le contrÃ´leur :</p>
<pre class="tab">return redirect()-&#62;route('users.index')-&#62;with('success', 'Utilisateur ajoutÃ© avec succÃ¨s');</pre>
<h3>ğŸ”¹ 6.2 Afficher le message dans la vue</h3>
<p>Dans la vue Blade :</p>
<pre class="tab">&#64;if (session('success'))
    &#60;div class="alert alert-success"&#62;&#123; &#123; session('success') &#125; &#125;&#60;/div&#62;
&#64;endif
&#64;if (session('error'))
    &#60;div class="alert alert-danger"&#62;&#123; &#123; session('error') &#125; &#125;&#60;/div&#62;
&#64;endif</pre>
<h3>ğŸ”¹ 6.2 AmÃ©liorer avec Bootstrap pour la fermeture automatique</h3>
<p>Dans la vue Blade :</p>
<pre class="tab">&#64;if (session('success'))
    &#60;div class="alert alert-success alert-dismissible fade show" role="alert"&#62;
        &#123; &#123; session('success') &#125; &#125;
        &#60;button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"&#62;&#60;/button&#62;
    &#60;/div&#62;
&#64;endif</pre>












  `,
  styles: `
  .tab,p,li{
    font-size:15px;
  }
.tab {
           background-color: #f8f9fa;
           padding: 15px;
           border: 1px solid #ddd;
           border-radius: 5px;
           overflow-x: auto;
           font-family: monospace;
         }
  `,
})
export class LaravelFormsComponent implements OnInit {
  constructor() {}

  ngOnInit(): void {}
}
