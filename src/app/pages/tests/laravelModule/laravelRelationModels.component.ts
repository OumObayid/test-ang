import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-relation-models',
  template: `
    <h1>
      üìå Cours d√©taill√© : Gestion des relations entre les mod√®les (Eloquent
      Relationships)
    </h1>
    <h2>üéØ Objectifs de cette le√ßon</h2>
    <ul>
      <li>Comprendre les relations entre les mod√®les dans Laravel</li>
      <li>Savoir comment les impl√©menter avec Eloquent</li>
      <li>
        Utiliser ces relations pour interroger la base de donn√©es efficacement
      </li>
    </ul>
    <h2>1Ô∏è‚É£ Introduction aux relations Eloquent</h2>
    <p>
      Laravel utilise Eloquent ORM (Object-Relational Mapping) pour interagir
      avec la base de donn√©es en manipulant des objets plut√¥t que des requ√™tes
      SQL brutes.
    </p>
    <h3>üîπ Pourquoi utiliser les relations ?</h3>
    <ul>
      <li>√âvite d‚Äô√©crire des requ√™tes SQL complexes</li>
      <li>Rend le code plus lisible et maintenable</li>
      <li>Facilite la r√©cup√©ration des donn√©es li√©es</li>
    </ul>
    <h3>üîπ Les types de relations dans Laravel :</h3>
    <ul>
      <li>hasOne: Un √† un (ex : un utilisateur a un profil)</li>
      <li>hasMany: Un √† plusieurs (ex : une cat√©gorie a plusieurs produits)</li>
      <li>
        belongsTo: Relation inverse (ex : un produit appartient √† une cat√©gorie)
      </li>
      <li>
        belongsToMany: Plusieurs √† plusieurs (ex : un produit peut appartenir √†
        plusieurs commandes)
      </li>
      <li>
        hasManyThrough: Un √† plusieurs √† travers un mod√®le interm√©diaire (ex :
        un pays a plusieurs commandes √† travers ses utilisateurs)
      </li>
      <li>
        morphOne / morphMany: Relations polymorphiques (ex : une image peut
        appartenir √† un produit ou un utilisateur)
      </li>
    </ul>
    <h2>2Ô∏è‚É£ Relation "Un √† Un" (hasOne et belongsTo)</h2>
    <p><strong>Exemple :</strong> Un utilisateur a un profil</p>
    <ul>
      <li>Un utilisateur poss√®de un seul profil</li>
      <li>Un profil appartient √† un utilisateur</li>
    </ul>
    <strong>Migration</strong>
    <p>On ajoute une cl√© √©trang√®re user_id √† la table profiles :</p>
    <pre class="tab">
Schema::create('profiles', function (Blueprint $table) &#123;
    $table-&#62;id();
    $table-&#62;unsignedBigInteger('user_id')-&#62;unique();
    $table-&#62;string('bio');
    $table-&#62;timestamps();

    $table-&#62;foreign('user_id')-&#62;references('id')-&#62;on('users')-&#62;onDelete('cascade');
&#125;);</pre
    >
    <p><strong>Mod√®le</strong> User.php (<strong>Relation</strong> hasOne)</p>
    <pre class="tab">
class User extends Model
&#123;
    public function profile()
    &#123;
        return $this-&#62;hasOne(Profile::class);
    &#125;
&#125;</pre
    >
    <p>
      <strong>Mod√®le</strong> Profile.php (<strong>Relation</strong> belongsTo)
    </p>
    <pre class="tab">
class Profile extends Model
&#123;
    public function user()
    &#123;
        return $this-&#62;belongsTo(User::class);
    &#125;
&#125;</pre
    >
    <p><strong>Utilisation</strong></p>
    <pre class="tab">
$user = User::find(1);
$profile = $user-&#62;profile; // R√©cup√©rer le profil de l'utilisateur

$profile = Profile::find(1);
$user = $profile-&#62;user; // R√©cup√©rer l'utilisateur associ√© au profil</pre
    >
    <h2>3Ô∏è‚É£ Relation "Un √† Plusieurs" (hasMany et belongsTo)</h2>
    <p><strong>Exemple : Une cat√©gorie a plusieurs produits</strong></p>
    <ul>
      <li>Une cat√©gorie contient plusieurs produits</li>
      <li>Un produit appartient √† une seule cat√©gorie</li>
    </ul>
    <p><strong>Migration</strong></p>
    <p>On ajoute une cl√© √©trang√®re category_id √† la table products :</p>
    <pre class="tab">
Schema::create('products', function (Blueprint $table) &#123;
    $table-&#62;id();
    $table-&#62;unsignedBigInteger('category_id');
    $table-&#62;string('name');
    $table-&#62;decimal('price', 10, 2);
    $table-&#62;timestamps();

    $table-&#62;foreign('category_id')-&#62;references('id')-&#62;on('categories')-&#62;onDelete('cascade');
&#125;);</pre
    >
    <p>
      <strong>Mod√®le</strong> Category.php (<strong>Relation</strong> hasMany)
    </p>
    <pre class="tab">
class Category extends Model
&#123;
    public function products()
    &#123;
        return $this-&#62;hasMany(Product::class);
    &#125;
&#125;</pre
    >
    <p>
      <strong>Mod√®le</strong> Product.php (<strong>Relation</strong> belongsTo)
    </p>
    <pre class="tab">
class Product extends Model
&#123;
    public function category()
    &#123;
        return $this-&#62;belongsTo(Category::class);
    &#125;
&#125;</pre
    >
    <p><strong>Utilisation</strong></p>
    <pre class="tab">
$category = Category::find(1);
$products = $category-&#62;products; // R√©cup√©rer tous les produits d'une cat√©gorie

$product = Product::find(1);
$category = $product-&#62;category; // R√©cup√©rer la cat√©gorie d'un produit</pre
    >
    <h2>4Ô∏è‚É£ Relation "Plusieurs √† Plusieurs" (belongsToMany)</h2>
    <p>
      <strong
        >Exemple : Un produit appartient √† plusieurs commandes et une commande
        contient plusieurs produits</strong
      >
    </p>
    <ul>
      <li>Un produit peut √™tre dans plusieurs commandes</li>
      <li>Une commande contient plusieurs produits</li>
    </ul>
    <p><strong>Migration pour la table pivot</strong> order_product</p>
    <pre class="tab">
Schema::create('order_product', function (Blueprint $table) &#123;
    $table-&#62;id();
    $table-&#62;unsignedBigInteger('order_id');
    $table-&#62;unsignedBigInteger('product_id');
    $table-&#62;integer('quantity');
    $table-&#62;timestamps();

    $table-&#62;foreign('order_id')-&#62;references('id')-&#62;on('orders')-&#62;onDelete('cascade');
    $table-&#62;foreign('product_id')-&#62;references('id')-&#62;on('products')-&#62;onDelete('cascade');
&#125;);</pre
    >
    <p><strong>Mod√®le</strong> Order.php</p>
    <pre class="tab">
class Order extends Model
&#123;
    public function products()
    &#123;
        return $this-&#62;belongsToMany(Product::class)-&#62;withPivot('quantity');
    &#125;
&#125;</pre
    >
    <p><strong>Mod√®le </strong> Product.php</p>
    <pre class="tab">
class Product extends Model
&#123;
    public function orders()
    &#123;
        return $this-&#62;belongsToMany(Order::class)-&#62;withPivot('quantity');
    &#125;
&#125;</pre
    >
    <p><strong>Utilisation</strong></p>
    <pre class="tab">
$order = Order::find(1);
$products = $order-&#62;products; // R√©cup√©rer les produits d'une commande

$product = Product::find(1);
$orders = $product-&#62;orders; // R√©cup√©rer les commandes d'un produit</pre
    >
    <h2>5Ô∏è‚É£ Relation "Un √† Plusieurs √† Travers" (hasManyThrough)</h2>
    <p>
      <strong
        >Exemple : Un pays a plusieurs commandes via ses utilisateurs</strong
      >
    </p>
    <ul>
      <li>Un pays a plusieurs utilisateurs</li>
      <li>Chaque utilisateur passe plusieurs commandes</li>
      <li>
        Un pays peut donc avoir plusieurs commandes √† travers ses utilisateurs
      </li>
    </ul>
    <p><strong>Mod√®le</strong> Country.php</p>
    <pre class="tab">
class Country extends Model
&#123;
    public function orders()
    &#123;
        return $this-&#62;hasManyThrough(Order::class, User::class);
    &#125;
&#125;</pre
    >

    <p><strong>Utilisation</strong></p>
    <pre class="tab">
$country = Country::find(1);
$orders = $country->orders; // R√©cup√©rer toutes les commandes d‚Äôun pays
</pre>
    <h2>6Ô∏è‚É£ Relations Polymorphiques (morphOne et morphMany)</h2>
    <p>
      <strong
        >Exemple : Une image peut appartenir √† un utilisateur ou un
        produit</strong
      >
    </p>
    <p><strong>Migration</strong> images</p>
    <pre class="tab">
Schema::create('images', function (Blueprint $table) &#123;
    $table-&#62;id();
    $table-&#62;string('url');
    $table-&#62;morphs('imageable'); // Cr√©e automatiquement &#96;imageable_id&#96; et &#96;imageable_type&#96;
    $table-&#62;timestamps();
&#125;);</pre
    >
    <p><strong>Mod√®le</strong> Image.php</p>
    <pre class="tab">
class Image extends Model
&#123;
    public function imageable()
    &#123;
        return $this-&#62;morphTo();
    &#125;
&#125;</pre
    >
    <p><strong>Mod√®le</strong> User.php</p>
    <pre class="tab">
class User extends Model
&#123;
    public function image()
    &#123;
        return $this-&#62;morphOne(Image::class, 'imageable');
    &#125;
&#125;</pre
    >
    <p><strong>Mod√®le</strong> Product.php</p>
    <pre class="tab">
class Product extends Model
&#123;
    public function images()
    &#123;
        return $this-&#62;morphMany(Image::class, 'imageable');
    &#125;
&#125;</pre
    >
    <p><strong>Utilisation</strong></p>
    <pre class="tab">
$user = User::find(1);
$image = $user->image; // R√©cup√©rer l‚Äôimage d‚Äôun utilisateur
</pre>
  `,
  styles: `
 .tab,p,li{
   font-size:15px;
 }
.tab {
          background-color: #f8f9fa;
          padding: 15px;
          border: 1px solid #ddd;
          border-radius: 5px;
          overflow-x: auto;
          font-family: monospace;
        }
 `,
})
export class LaravelRelationModelsComponent implements OnInit {
  constructor() {}

  ngOnInit(): void {}
}
