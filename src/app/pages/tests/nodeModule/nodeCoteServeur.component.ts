import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-javascript-serveur',
  template: `
  <div class="container mt-5">
    <h1 class="text-center">
        üåê Node.js : Le JavaScript c√¥t√© serveur
    </h1>

    <!-- Section 1 : Pourquoi utiliser JavaScript c√¥t√© serveur ? -->
    <div class="card my-3">
        <div class="card-body">
            <h2 class="card-title">
                ü§î Pourquoi utiliser JavaScript c√¥t√© serveur ?
            </h2>
            <p class="card-text">
                JavaScript est traditionnellement utilis√© c√¥t√© client, mais avec Node.js, il peut maintenant √™tre utilis√© c√¥t√© serveur.
                Voici quelques raisons pour lesquelles JavaScript c√¥t√© serveur est avantageux :
            </p>
            <ul>
                <li><strong>Unification du langage :</strong> Utiliser le m√™me langage sur le front-end et le back-end facilite le d√©veloppement.</li>
                <li><strong>Grande communaut√© :</strong> JavaScript a une √©norme communaut√© avec de nombreuses biblioth√®ques et frameworks.</li>
                <li><strong>Asynchrone par nature :</strong> Node.js utilise des appels non bloquants et des √©v√©nements, ce qui le rend tr√®s efficace pour les applications en temps r√©el.</li>
            </ul>
        </div>
    </div>

    <!-- Section 2 : Fonctionnement de Node.js c√¥t√© serveur -->
    <div class="card my-3">
        <div class="card-body">
            <h2 class="card-title">
                ‚öôÔ∏è Fonctionnement de Node.js c√¥t√© serveur
            </h2>
            <p class="card-text">
                Node.js repose sur un mod√®le bas√© sur des √©v√©nements et un mod√®le non bloquant. Cela signifie qu'il peut g√©rer de multiples connexions simultan√©es sans √™tre ralenti par des processus bloquants.
            </p>
            <p class="card-text">
                Cela permet √† Node.js d'√™tre particuli√®rement performant dans des applications comme les serveurs web ou les syst√®mes de messagerie en temps r√©el.
            </p>
            <p class="card-text">
                Voici les concepts cl√©s :
            </p>
            <ul>
                <li><strong>Single-threaded :</strong> Node.js utilise un seul thread pour ex√©cuter le code JavaScript, mais il g√®re les √©v√©nements de mani√®re asynchrone, ce qui permet de traiter de nombreuses requ√™tes sans bloquer le programme.</li>
                <li><strong>Event Loop :</strong> L'Event Loop permet de g√©rer les √©v√©nements (par exemple, les requ√™tes HTTP) et de les ex√©cuter de mani√®re non bloquante.</li>
            </ul>
        </div>
    </div>

    <!-- Section 3 : Cr√©er un serveur HTTP avec Node.js -->
    <div class="card my-3">
        <div class="card-body">
            <h2 class="card-title">
                üñ•Ô∏è Cr√©er un serveur HTTP avec Node.js
            </h2>
            <p class="card-text">
                Pour cr√©er un serveur HTTP simple avec Node.js, vous pouvez utiliser le module natif <code>http</code>.
            </p>
            <p class="card-text">
                Voici un exemple de code pour cr√©er un serveur HTTP qui r√©pond aux requ√™tes avec un message "Hello, World!" :
            </p>
            <div class="bg-light p-3 mb-3" style="font-size: 1.2em; border-radius: 5px;">
                <pre><code>
const http = require('http');

const server = http.createServer((req, res) => &#123;
  res.writeHead(200, &#123; 'Content-Type': 'text/plain' &#125;);
  res.end('Hello, World!');
&#125;);

server.listen(3000, () => &#123;
  console.log('Server running at http://localhost:3000');
&#125;);
                </code></pre>
            </div>
            <p class="card-text">
                Ce code cr√©e un serveur qui √©coute les requ√™tes sur le port 3000 et r√©pond avec "Hello, World!".
                Pour tester ce serveur, ouvrez votre navigateur et acc√©dez √† <code>http://localhost:3000</code>.
            </p>
        </div>
    </div>
</div>

`,
  styles: [``]
})
export class NodeCoteServeurComponent implements OnInit {
  constructor() { }

  ngOnInit(): void { }
}

