import { Component } from '@angular/core';

@Component({
  selector: 'app-reactAppelApi',
  template: `
<h1 style="font-size: 24px;">üöÄ Le Hook useEffect: Effectuer des Appels API</h1>

<section>
    <h2 style="font-size: 20px;">üí° Introduction</h2>
    <p style="font-size: 16px;">
        Le hook <code>useEffect</code> peut √™tre utilis√© pour effectuer des appels API dans une application React. Il est courant de r√©cup√©rer des donn√©es depuis un serveur au moment du montage d'un composant, puis d'afficher ces donn√©es dans le rendu du composant. Le hook <code>useEffect</code> est id√©al pour g√©rer ce type d'effet secondaire, comme l'appel √† une API.
    </p>

    <h3 style="font-size: 16px;">‚öôÔ∏è Syntaxe du Hook useEffect avec un appel API</h3>
    <p style="font-size: 16px;">
        L'appel √† une API dans <code>useEffect</code> se fait de mani√®re asynchrone. Il est souvent utile d'utiliser <code>async</code> et <code>await</code> dans la fonction de rappel pour g√©rer l'appel API de mani√®re claire et concise. Vous pouvez aussi g√©rer l'√©tat du chargement et des erreurs pendant que l'appel API est en cours.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState, useEffect &#125; from 'react';

function FetchData() &#123;
  const [data, setData] = useState(null);  // √âtat pour stocker les donn√©es r√©cup√©r√©es
  const [loading, setLoading] = useState(true);  // √âtat pour g√©rer le chargement
  const [error, setError] = useState(null);  // √âtat pour g√©rer les erreurs

  useEffect(() => &#123;
    // Fonction asynchrone pour effectuer l'appel API
    const fetchData = async () => &#123;
      try &#123;
        const response = await fetch('https://api.example.com/data');
        const result = await response.json();
        setData(result);  // Mettre √† jour l'√©tat avec les donn√©es r√©cup√©r√©es
        setLoading(false);  // Fin du chargement
      &#125; catch (error) &#123;
        setError(error);  // G√©rer les erreurs
        setLoading(false);  // Fin du chargement
      &#125;
    &#125;

    fetchData();  // Appel de la fonction

  &#125;, []);  // Le tableau vide signifie que l'effet ne se d√©clenche qu'une fois au montage

  if (loading) &#123;
    return &#60;div&#62;Chargement en cours...&#60;/div&#62;;
  &#125;

  if (error) &#123;
    return &#60;div&#62;Erreur: &#123;error.message&#125;&#60;/div&#62;;
  &#125;

  return &#60;div&#62;
    &#60;h1&#62;Donn√©es r√©cup√©r√©es&#60;/h1&#62;
    &#60;pre&#62;&#123;JSON.stringify(data, null, 2)&#125;&#60;/pre&#62;
  &#60;/div&#62;;
&#125;

export default FetchData;
</code></pre>

    <p style="font-size: 16px;">
        Dans cet exemple, nous utilisons <code>useEffect</code> pour effectuer un appel API lorsque le composant est mont√©. Nous g√©rons l'√©tat pour les donn√©es (<code>data</code>), le statut de chargement (<code>loading</code>) et les erreurs (<code>error</code>).
    </p>

    <h3 style="font-size: 16px;">üí° D√©tails de l'exemple</h3>
    <ul style="font-size: 16px;">
        <li><strong>useState</strong>: Nous utilisons <code>useState</code> pour d√©finir trois √©tats: <code>data</code> (les donn√©es r√©cup√©r√©es), <code>loading</code> (indiquant si les donn√©es sont en train d'√™tre charg√©es), et <code>error</code> (pour g√©rer les erreurs d'appel API).</li>
        <li><strong>useEffect</strong>: Nous effectuons l'appel API dans <code>useEffect</code> une seule fois, lors du montage du composant, gr√¢ce au tableau de d√©pendances vide <code>[]</code>.</li>
        <li><strong>fetch</strong>: Nous utilisons la m√©thode <code>fetch</code> pour effectuer l'appel API. C'est une m√©thode native de JavaScript pour r√©cup√©rer des ressources via le r√©seau.</li>
        <li><strong>async/await</strong>: Nous utilisons <code>async/await</code> pour rendre l'appel API asynchrone et plus facile √† comprendre.</li>
        <li><strong>Gestion des erreurs</strong>: Si l'appel √©choue, l'erreur est captur√©e et stock√©e dans l'√©tat <code>error</code>, ce qui permet d'afficher un message d'erreur.</li>
        <li><strong>Affichage des donn√©es</strong>: Si les donn√©es sont charg√©es avec succ√®s, elles sont affich√©es sous forme de JSON format√© √† l'aide de <code>JSON.stringify</code>.</li>
    </ul>

    <h3 style="font-size: 16px;">üéØ Conclusion</h3>
    <p style="font-size: 16px;">
        Le hook <code>useEffect</code> est extr√™mement utile pour effectuer des appels API dans vos composants React. Il vous permet de r√©cup√©rer des donn√©es depuis un serveur au moment du montage du composant et de g√©rer le chargement et les erreurs de mani√®re simple. Utilisez-le pour int√©grer facilement des appels API et afficher dynamiquement des donn√©es dans vos applications React.
    </p>
</section>

  `,
  styles: [``]
})
export class ReactAppelApiComponent  {

}

