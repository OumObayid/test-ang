import { Component } from '@angular/core';

@Component({
  selector: 'app-reactComposer',
  template: `
  <h1 style="font-size: 24px;">üöÄ Composition des Composants : Structurer une Application React</h1>

<section>
    <h2 style="font-size: 20px;">  Composition des Composants</h2>
    <p style="font-size: 16px;">
        La <strong>composition des composants</strong> est un concept fondamental en React. Elle permet de structurer une application en combinant des composants plus petits pour former des applications plus grandes. En utilisant la composition, nous pouvons r√©utiliser des composants, r√©duire la duplication du code et rendre l'application plus modulaire.
    </p>
    <p style="font-size: 16px;">
        Contrairement √† d'autres biblioth√®ques ou frameworks o√π l'h√©ritage est utilis√© pour cr√©er des hi√©rarchies complexes de composants, React privil√©gie la composition. En d'autres termes, au lieu de cr√©er des sous-classes de composants, nous allons "composer" des composants en les imbriquant les uns dans les autres.
    </p>

    <h3 style="font-size: 16px;"> Passage de Composants Enfants avec &#96;props.children&#96;</h3>
    <p style="font-size: 16px;">
        L'une des m√©thodes les plus courantes de composition en React est le passage de composants enfants via la prop sp√©ciale <code>&#96;children&#96;</code>. Cette prop permet √† un composant parent d'encapsuler un contenu qui sera rendu dans le composant enfant.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
function Container(props) &#123;
  return &#60;div&#62;
    &#123;props.children&#125;
  &#60;/div&#62;
&#125;

function App() &#123;
  return &#60;Container&#62;
    &#60;h1&#62;Titre de la page&#60;/h1&#62;
    &#60;p&#62;Voici le contenu principal de l'application&#60;/p&#62;
  &#60;/Container&#62;
&#125;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, le composant <code>Container</code> sert de "wrapper" pour d'autres composants. Le contenu entre les balises <code>&#60;Container&#62;</code> et <code>&#60;/Container&#62;</code> dans le composant <code>App</code> sera pass√© √† <code>Container</code> via la prop <code>&#96;children&#96;</code>.
    </p>

    <h3 style="font-size: 16px;"> Cr√©ation de Composants Compos√©s</h3>
    <p style="font-size: 16px;">
        En utilisant la composition, vous pouvez cr√©er des composants plus complexes √† partir de composants plus petits et plus simples. Par exemple, un composant de carte peut √™tre compos√© de plusieurs autres composants comme le titre, le corps du texte et le pied de page.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
function CardTitle(props) &#123;
  return &#60;h2&#62;&#123;props.title&#125;&#60;/h2&#62;
&#125;

function CardBody(props) &#123;
  return &#60;p&#62;&#123;props.body&#125;&#60;/p&#62;
&#125;

function CardFooter(props) &#123;
  return &#60;footer&#62;&#123;props.footer&#125;&#60;/footer&#62;
&#125;

function Card(props) &#123;
  return &#60;div className="card"&#62;
    &#60;CardTitle title=&#123;props.title&#125; /&#62;
    &#60;CardBody body=&#123;props.body&#125; /&#62;
    &#60;CardFooter footer=&#123;props.footer&#125; /&#62;
  &#60;/div&#62;
&#125;

function App() &#123;
  return &#60;Card title="Titre de la carte" body="Contenu de la carte" footer="Pied de page" /&#62;
&#125;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, nous avons cr√©√© plusieurs petits composants comme <code>CardTitle</code>, <code>CardBody</code>, et <code>CardFooter</code>, qui sont ensuite combin√©s pour former un composant plus complexe <code>Card</code>. Ce type de composition permet de maintenir les composants r√©utilisables et faciles √† comprendre.
    </p>

    <h3 style="font-size: 16px;">&#128187; Composants Pr√©sentations vs Composants Conteneurs</h3>
    <p style="font-size: 16px;">
        Une autre approche de la composition des composants est de s√©parer les composants en deux cat√©gories : les <strong>composants de pr√©sentation</strong> et les <strong>composants conteneurs</strong>.
    </p>
    <p style="font-size: 16px;">
        - Les <strong>composants de pr√©sentation</strong> sont responsables de l'affichage des donn√©es et ne manipulent g√©n√©ralement pas l'√©tat (ils sont souvent des composants "stateless").
        - Les <strong>composants conteneurs</strong> g√®rent la logique et l'√©tat, et sont responsables de la gestion des donn√©es.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
// Composant de pr√©sentation
function UserProfile(props) &#123;
  return &#60;div&#62;
    &#60;h2&#62;Nom: &#123;props.name&#125;&#60;/h2&#62;
    &#60;h3&#62;√Çge: &#123;props.age&#125;&#60;/h3&#62;
  &#60;/div&#62;
&#125;

// Composant conteneur
function UserContainer() &#123;
  const user = &#123; name: 'Alice', age: 30 &#125;;
  return &#60;UserProfile name=&#123;user.name&#125; age=&#123;user.age&#125; /&#62;
&#125;
</code></pre>
    <p style="font-size: 16px;">
        Ici, <code>UserProfile</code> est un composant de pr√©sentation qui re√ßoit des donn√©es via des props, tandis que <code>UserContainer</code> est un composant conteneur qui g√®re les donn√©es et les passe √† <code>UserProfile</code>.
    </p>

    <h3 style="font-size: 16px;">‚öôÔ∏è Composants R√©utilisables et Param√©trables</h3>
    <p style="font-size: 16px;">
        Un autre avantage de la composition des composants est la possibilit√© de cr√©er des composants r√©utilisables et param√©trables. En combinant des composants simples et bien d√©finis, vous pouvez cr√©er une grande vari√©t√© de composants r√©utilisables pour diff√©rentes parties de votre application.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
function Button(props) &#123;
  return &#60;button className=&#123;props.className&#125;&#62;&#123;props.label&#125;&#60;/button&#62;
&#125;

function App() &#123;
  return &#60;div&#62;
    &#60;Button className="primary" label="Valider" /&#62;
    &#60;Button className="secondary" label="Annuler" /&#62;
  &#60;/div&#62;
&#125;
</code></pre>
    <p style="font-size: 16px;">
        Le composant <code>Button</code> est un composant r√©utilisable qui peut √™tre utilis√© plusieurs fois avec diff√©rentes props. En passant diff√©rentes classes et √©tiquettes, vous pouvez obtenir diff√©rents boutons avec la m√™me structure de base.
    </p>

    <h3 style="font-size: 16px;">üîö Conclusion</h3>
    <p style="font-size: 16px;">
        La composition des composants est un concept cl√© de React, qui vous permet de structurer votre application de mani√®re modulaire et r√©utilisable. En combinant des composants plus petits et plus simples, vous pouvez cr√©er des applications plus grandes, plus claires et plus faciles √† maintenir.
    </p>
</section>

  `,
  styles: [``]
})
export class reactComposerComponent  {

}

