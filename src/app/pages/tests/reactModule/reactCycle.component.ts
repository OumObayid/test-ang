import { Component } from '@angular/core';

@Component({
  selector: 'app-reactCycle',
  template: `
<h1 style="font-size: 24px;">üöÄ Le Hook useEffect: Cycle de Vie dans React</h1>

<section>
    <h2 style="font-size: 20px;">üí° Introduction au Hook useEffect</h2>
    <p style="font-size: 16px;">
        Le hook <code>useEffect</code> permet d'effectuer des effets secondaires dans vos composants React. Un effet secondaire peut √™tre toute op√©ration qui modifie l'√©tat en dehors du processus de rendu du composant. Cela inclut des op√©rations telles que des appels API, la manipulation du DOM, ou la souscription √† des flux de donn√©es. Le hook <code>useEffect</code> remplace l'utilisation des m√©thodes de cycle de vie des composants de classe comme <code>componentDidMount</code>, <code>componentDidUpdate</code> et <code>componentWillUnmount</code>.
    </p>

    <h3 style="font-size: 16px;">‚öôÔ∏è Syntaxe du Hook useEffect</h3>
    <p style="font-size: 16px;">
        La syntaxe de base du hook <code>useEffect</code> est tr√®s simple. Il prend une fonction de rappel (callback) qui s'ex√©cute apr√®s chaque rendu du composant, et un tableau de d√©pendances optionnel pour contr√¥ler quand cet effet doit √™tre d√©clench√©.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState, useEffect &#125; from 'react';

function Example() &#123;
  const [count, setCount] = useState(0);

  useEffect(() => &#123;
    document.title = 'Vous avez cliqu√© ' + count + ' fois';
  &#125;, [count]);

  return (
    &#60;div&#62;
      &#60;h1&#62;Vous avez cliqu√© &#123;count&#125; fois&#60;/h1&#62;
      &#60;button onClick=&#123;() => setCount(count + 1)&#125;&#62;Cliquez ici&#60;/button&#62;
    &#60;/div&#62;
  &#125;

export default Example;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, l'effet change le titre du document en fonction de l'√©tat du compteur <code>count</code>. Le hook <code>useEffect</code> est d√©clench√© apr√®s chaque rendu, mais uniquement lorsque <code>count</code> change gr√¢ce au tableau de d√©pendances.
    </p>

    <h3 style="font-size: 16px;">üñ±Ô∏è Le Hook useEffect et le Cycle de Vie</h3>
    <p style="font-size: 16px;">
        Le hook <code>useEffect</code> peut √™tre utilis√© pour imiter les diff√©rents cycles de vie des composants de classe, comme le montage, la mise √† jour, et le d√©montage du composant.
    </p>

    <h4 style="font-size: 16px;">üîÑ Composant Mont√©: componentDidMount</h4>
    <p style="font-size: 16px;">
        Lorsque le tableau de d√©pendances est vide, l'effet ne se d√©clenche qu'une seule fois, apr√®s le premier rendu du composant. Cela ressemble au comportement de <code>componentDidMount</code> dans les composants de classe.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
useEffect(() => &#123;
  // Code ex√©cut√© une fois apr√®s le premier rendu
  console.log('Composant mont√©');
&#125;, []);  // Le tableau vide signifie qu'il ne s'ex√©cute qu'une fois
</code></pre>

    <h4 style="font-size: 16px;">üîÑ Composant Mise √† Jour: componentDidUpdate</h4>
    <p style="font-size: 16px;">
        Lorsque vous passez une liste de d√©pendances au hook <code>useEffect</code>, il sera appel√© chaque fois qu'une des d√©pendances change. Cela imite le comportement de <code>componentDidUpdate</code> dans les composants de classe.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
useEffect(() => &#123;
  // Code ex√©cut√© chaque fois que "count" change
  console.log('Composant mis √† jour: ', count);
&#125;, [count]);  // Se d√©clenche lorsque "count" change
</code></pre>

    <h4 style="font-size: 16px;">üîÑ Composant D√©mont√©: componentWillUnmount</h4>
    <p style="font-size: 16px;">
        Si vous retournez une fonction de nettoyage dans <code>useEffect</code>, elle sera ex√©cut√©e lorsque le composant sera d√©mont√©, ou avant que l'effet ne soit r√©ex√©cut√© lors du prochain rendu. Cela imite le comportement de <code>componentWillUnmount</code> dans les composants de classe.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
useEffect(() => &#123;
  // Code ex√©cut√© lors du montage

  return () => &#123;
    // Code ex√©cut√© lors du d√©montage
    console.log('Composant d√©mont√©');
  &#125;
&#125;, []);  // Le tableau vide signifie qu'il se d√©clenche une seule fois
</code></pre>

    <h3 style="font-size: 16px;">‚ö° R√©capitulatif des Comportements de useEffect</h3>
    <ul style="font-size: 16px;">
        <li><strong>Avec un tableau vide:</strong> l'effet est ex√©cut√© une seule fois, apr√®s le premier rendu (√©quivalent √† <code>componentDidMount</code>).</li>
        <li><strong>Avec des d√©pendances:</strong> l'effet est ex√©cut√© chaque fois qu'une des d√©pendances change (√©quivalent √† <code>componentDidUpdate</code>).</li>
        <li><strong>Retourner une fonction de nettoyage:</strong> la fonction de nettoyage sera appel√©e lorsque le composant est d√©mont√© ou avant la r√©ex√©cution de l'effet (√©quivalent √† <code>componentWillUnmount</code>).</li>
    </ul>

    <h3 style="font-size: 16px;">üéØ Conclusion</h3>
    <p style="font-size: 16px;">
        Le hook <code>useEffect</code> est une fonctionnalit√© puissante de React qui remplace les m√©thodes de cycle de vie des composants de classe. Il vous permet de g√©rer des effets secondaires tels que les appels API, la manipulation du DOM, et la gestion des souscriptions, tout en contr√¥lant finement quand ces effets doivent √™tre d√©clench√©s. En ma√Ætrisant <code>useEffect</code>, vous pouvez rendre vos composants plus efficaces et bien structur√©s.
    </p>
</section>

  `,
  styles: [``]
})
export class ReactCycleComponent  {

}

