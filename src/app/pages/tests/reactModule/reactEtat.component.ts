import { Component } from '@angular/core';

@Component({
  selector: 'app-reactŸèEtat',
  template: `
<h1 style="font-size: 24px;">üöÄ L'√âtat dans les Composants de Classe</h1>

<section>
    <h2 style="font-size: 20px;">üí° Introduction aux Composants de Classe et l'√âtat</h2>
    <p style="font-size: 16px;">
        Dans React, les composants de classe √©taient la m√©thode principale pour g√©rer l'√©tat avant l'introduction des hooks. Dans un composant de classe, l'√©tat est g√©r√© via un objet <code>this.state</code>, et la mise √† jour de cet √©tat se fait en utilisant la m√©thode <code>this.setState()</code>.
    </p>
    <p style="font-size: 16px;">
        Bien que l'utilisation des hooks (comme <code>useState</code>) soit maintenant privil√©gi√©e, il est toujours important de comprendre comment g√©rer l'√©tat dans un composant de classe, car vous rencontrerez encore des projets qui utilisent cette approche.
    </p>

    <h3 style="font-size: 16px;">‚öôÔ∏è Syntaxe de l'√âtat dans un Composant de Classe</h3>
    <p style="font-size: 16px;">
        Dans un composant de classe, vous devez initialiser l'√©tat dans le constructeur. Ensuite, vous utilisez <code>this.state</code> pour acc√©der √† l'√©tat, et <code>this.setState()</code> pour le mettre √† jour.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
class Counter extends React.Component &#123;
  constructor(props) &#123;
    super(props);
    this.state = &#123;
      count: 0
    &#125;;
  &#125;

  increment = () => &#123;
    this.setState(prevState => &#123;
      return &#123; count: prevState.count + 1 &#125;;
    &#125;);
  &#125;

  render() &#123;
    return &#60;div&#62;
      &#60;h2&#62;Compteur: &#123;this.state.count&#125;&#60;/h2&#62;
      &#60;button onClick=&#123;this.increment&#125;&#62;Ajouter 1&#60;/button&#62;
    &#60;/div&#62;
  &#125;
&#125;

export default Counter;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple :
        - <code>this.state</code> est utilis√© pour d√©finir l'√©tat initial (compteur √† 0).
        - <code>this.setState()</code> est utilis√© pour mettre √† jour l'√©tat lorsque le bouton est cliqu√©.
    </p>

    <h3 style="font-size: 16px;">üõ†Ô∏è Comprendre <code>this.setState()</code></h3>
    <p style="font-size: 16px;">
        La m√©thode <code>this.setState()</code> est utilis√©e pour modifier l'√©tat dans un composant de classe. Elle accepte un objet ou une fonction en argument. Si un objet est pass√©, il fusionne l'√©tat actuel avec les nouvelles valeurs. Si une fonction est utilis√©e, elle re√ßoit l'√©tat pr√©c√©dent comme argument, ce qui permet de calculer l'√©tat suivant bas√© sur la valeur pr√©c√©dente.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
// Mettre √† jour l'√©tat en utilisant un objet
this.setState(&#123; count: this.state.count + 1 &#125;);

// Mettre √† jour l'√©tat en utilisant une fonction
this.setState((prevState) => &#123;
  return &#123; count: prevState.count + 1 &#125;;
&#125;);
</code></pre>

    <h3 style="font-size: 16px;">‚ö° Mise √† Jour Asynchrone de l'√âtat</h3>
    <p style="font-size: 16px;">
        Comme avec le hook <code>useState</code>, la m√©thode <code>this.setState()</code> est asynchrone. Cela signifie que l'√©tat n'est pas imm√©diatement mis √† jour apr√®s l'appel de <code>this.setState()</code>. Si vous devez acc√©der √† l'√©tat apr√®s sa mise √† jour, il est recommand√© d'utiliser un callback dans <code>this.setState()</code>.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
this.setState(&#123; count: this.state.count + 1 &#125;, () => &#123;
  console.log(this.state.count); // Affiche l'√©tat mis √† jour
&#125;);
</code></pre>

    <h3 style="font-size: 16px;">üì¶ Exemple Complet d'un Composant de Classe</h3>
    <p style="font-size: 16px;">
        Voici un exemple plus complet qui montre l'utilisation de <code>this.state</code> et <code>this.setState()</code> pour g√©rer l'√©tat dans un composant de classe.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
class Form extends React.Component &#123;
  constructor(props) &#123;
    super(props);
    this.state = &#123;
      name: '',
      age: ''
    &#125;;
  &#125;

  handleNameChange = (event) => &#123;
    this.setState(&#123; name: event.target.value &#125;);
  &#125;

  handleAgeChange = (event) => &#123;
    this.setState(&#123; age: event.target.value &#125;);
  &#125;

  handleSubmit = (event) => &#123;
    event.preventDefault();
    alert(&#96;Nom: $&#123;this.state.name&#125;, √Çge: $&#123;this.state.age&#125;&#96;);
  &#125;

  render() &#123;
    return &#60;form onSubmit=&#123;this.handleSubmit&#125;&#62;
      &#60;input
        type="text"
        value=&#123;this.state.name&#125;
        onChange=&#123;this.handleNameChange&#125;
        placeholder="Entrez votre nom"
      /&#62;
      &#60;input
        type="number"
        value=&#123;this.state.age&#125;
        onChange=&#123;this.handleAgeChange&#125;
        placeholder="Entrez votre √¢ge"
      /&#62;
      &#60;button type="submit"&#62;Envoyer&#60;/button&#62;
    &#60;/form&#62;
  &#125;
&#125;

export default Form;
</code></pre>

    <p style="font-size: 16px;">
        Dans cet exemple :
        - Le nom et l'√¢ge de l'utilisateur sont stock√©s dans l'√©tat.
        - Lorsqu'un utilisateur modifie l'input, l'√©tat est mis √† jour avec la nouvelle valeur.
        - Lors de la soumission du formulaire, un message avec le nom et l'√¢ge est affich√©.
    </p>

    <h3 style="font-size: 16px;">üß† Gestion de l'√âtat dans les Composants de Classe</h3>
    <p style="font-size: 16px;">
        Dans un composant de classe, vous pouvez utiliser l'√©tat pour stocker n'importe quelle donn√©e qui varie au fil du temps. Cela peut inclure des valeurs telles que des informations d'utilisateur, des comptages, des r√©sultats de calculs, etc. L'important est de g√©rer l'√©tat de mani√®re efficace pour rendre votre application dynamique.
    </p>

    <h3 style="font-size: 16px;">üéØ Conclusion</h3>
    <p style="font-size: 16px;">
        L'utilisation de l'√©tat dans les composants de classe est une pratique essentielle dans React. Bien que les hooks soient d√©sormais la m√©thode pr√©f√©r√©e, il est toujours crucial de savoir comment travailler avec l'√©tat dans les composants de classe, car vous pourriez √™tre amen√© √† g√©rer des projets existants utilisant cette approche.
    </p>
</section>

  `,
  styles: [``]
})
export class ReactEtatComponent  {

}

