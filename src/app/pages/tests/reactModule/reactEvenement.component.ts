import { Component } from '@angular/core';

@Component({
  selector: 'app-reactEvenement',
  template: `
<h1 style="font-size: 24px;">üöÄ Gestion des √âv√©nements dans React</h1>

<section>
    <h2 style="font-size: 20px;">üí° Introduction √† la Gestion des √âv√©nements</h2>
    <p style="font-size: 16px;">
        Dans React, la gestion des √©v√©nements est similaire √† celle du DOM classique, mais avec quelques diff√©rences. React utilise son propre syst√®me d'√©v√©nements bas√© sur un mod√®le de d√©l√©gation d'√©v√©nements. Ce mod√®le permet de g√©rer les √©v√©nements √† un niveau sup√©rieur sans avoir √† attacher des √©couteurs d'√©v√©nements √† chaque √©l√©ment individuellement.
    </p>
    <p style="font-size: 16px;">
        Les √©v√©nements dans React sont g√©r√©s par un objet d'√©v√©nement, et les noms des √©v√©nements sont en camelCase (par exemple, <code>onClick</code>, <code>onChange</code> au lieu de <code>onclick</code>, <code>onchange</code>).
    </p>

    <h3 style="font-size: 16px;">üñ±Ô∏è Ajouter un Gestionnaire d'√âv√©nements</h3>
    <p style="font-size: 16px;">
        Pour ajouter un gestionnaire d'√©v√©nements √† un √©l√©ment dans React, vous utilisez la syntaxe JSX avec des attributs comme <code>onClick</code>, <code>onChange</code>, etc. Vous assignez un gestionnaire d'√©v√©nements √† cet attribut pour d√©clencher une fonction lorsque l'√©v√©nement se produit.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';

function ButtonClick() &#123;
  const [message, setMessage] = useState('');

  const handleClick = () => &#123;
    setMessage('Bouton cliqu√©!');
  &#125;

  return (
    &#60;div&#62;
      &#60;button onClick=&#123;handleClick&#125;&#62;Cliquez ici&#60;/button&#62;
      &#60;p&#62;&#123;message&#125;&#60;/p&#62;
    &#60;/div&#62;
  &#125;

export default ButtonClick;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, un √©v√©nement <code>onClick</code> est attach√© √† un bouton. Lorsqu'il est cliqu√©, il d√©clenche la fonction <code>handleClick</code>, qui met √† jour l'√©tat du message.
    </p>

    <h3 style="font-size: 16px;">‚öôÔ∏è Passer des Param√®tres aux Gestionnaires d'√âv√©nements</h3>
    <p style="font-size: 16px;">
        Parfois, vous voudrez passer des arguments ou des param√®tres √† vos gestionnaires d'√©v√©nements. Pour ce faire, vous pouvez soit utiliser une fonction fl√©ch√©e, soit appeler une fonction directement dans l'attribut de l'√©v√©nement.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React from 'react';

function GreetUser() &#123;
  const greet = (name) => &#123;
    alert('Bonjour, ' + name + '!');
  &#125;

  return (
    &#60;div&#62;
      &#60;button onClick=&#123;() => greet('Alice')&#125;&#62;Salut Alice&#60;/button&#62;
      &#60;button onClick=&#123;() => greet('Bob')&#125;&#62;Salut Bob&#60;/button&#62;
    &#60;/div&#62;
  &#125;

export default GreetUser;
</code></pre>
    <p style="font-size: 16px;">
        Ici, on utilise une fonction fl√©ch√©e pour appeler le gestionnaire d'√©v√©nements <code>greet()</code> avec un argument sp√©cifique. Chaque bouton appelle <code>greet()</code> avec un nom diff√©rent.
    </p>

    <h3 style="font-size: 16px;">üß† L'√©v√©nement Synth√©tique de React</h3>
    <p style="font-size: 16px;">
        React cr√©e un "syst√®me d'√©v√©nements synth√©tiques" qui est une abstraction au-dessus du DOM natif. Cela permet √† React d'unifier les √©v√©nements sous un m√™me format, ind√©pendamment des diff√©rences entre les navigateurs. Par exemple, le gestionnaire d'√©v√©nements React est automatiquement li√© √† l'√©v√©nement natif, ce qui vous permet de travailler avec un m√™me objet d'√©v√©nement, quelle que soit la plateforme.
    </p>
    <p style="font-size: 16px;">
        L'objet √©v√©nement dans React fonctionne de mani√®re similaire √† l'objet √©v√©nement natif du DOM, mais il est normalis√©. Vous pouvez acc√©der √† l'objet √©v√©nement dans votre gestionnaire d'√©v√©nements en le passant en tant qu'argument.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React from 'react';

function MouseEvent() &#123;
  const handleClick = (event) => &#123;
    console.log('Position de la souris: ' + event.clientX + ', ' + event.clientY);
  &#125;

  return (
    &#60;div onClick=&#123;handleClick&#125;&#62;
      Cliquez n'importe o√π sur cet √©l√©ment
    &#60;/div&#62;
  &#125;

export default MouseEvent;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, l'objet <code>event</code> contient des informations sur la position de la souris. Vous pouvez acc√©der √† ses propri√©t√©s comme <code>clientX</code> et <code>clientY</code> pour conna√Ætre la position de l'√©v√©nement.
    </p>

    <h3 style="font-size: 16px;">‚ö° Emp√™cher le Comportement Par D√©faut</h3>
    <p style="font-size: 16px;">
        Comme dans le DOM traditionnel, vous pouvez emp√™cher le comportement par d√©faut d'un √©v√©nement en utilisant <code>event.preventDefault()</code>. Cela est particuli√®rement utile dans des cas comme les formulaires ou les liens.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';

function PreventDefaultExample() &#123;
  const [text, setText] = useState('');

  const handleSubmit = (event) => &#123;
    event.preventDefault();
    alert('Formulaire soumis: ' + text);
  &#125;

  return (
    &#60;form onSubmit=&#123;handleSubmit&#125;&#62;
      &#60;input
        type="text"
        value=&#123;text&#125;
        onChange=&#123;(e) => setText(e.target.value)&#125;
      /&#62;
      &#60;button type="submit"&#62;Soumettre&#60;/button&#62;
    &#60;/form&#62;
  &#125;

export default PreventDefaultExample;
</code></pre>
    <p style="font-size: 16px;">
        Ici, l'appel √† <code>event.preventDefault()</code> emp√™che le formulaire de se soumettre r√©ellement, permettant d'ex√©cuter une action personnalis√©e √† la place.
    </p>

    <h3 style="font-size: 16px;">üîÑ Gestion des √âv√©nements Asynchrones</h3>
    <p style="font-size: 16px;">
        Lorsqu'il s'agit d'√©v√©nements asynchrones, comme lorsqu'on attend une r√©ponse d'une API, vous devez g√©rer l'√©v√©nement en cons√©quence. Vous pouvez utiliser des fonctions async/await pour g√©rer les appels asynchrones dans vos gestionnaires d'√©v√©nements.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';

function FetchDataOnClick() &#123;
  const [data, setData] = useState(null);

  const fetchData = async () => &#123;
    const response = await fetch('https://api.example.com/data');
    const result = await response.json();
    setData(result);
  &#125;

  return (
    &#60;div&#62;
      &#60;button onClick=&#123;fetchData&#125;&#62;Charger des donn√©es&#60;/button&#62;
      &#60;pre&#62;&#123;JSON.stringify(data, null, 2)&#125;&#60;/pre&#62;
    &#60;/div&#62;
  &#125;

export default FetchDataOnClick;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, le gestionnaire d'√©v√©nements <code>fetchData</code> est asynchrone, ce qui permet de r√©cup√©rer des donn√©es depuis une API lorsque l'utilisateur clique sur un bouton.
    </p>

    <h3 style="font-size: 16px;">üéØ Conclusion</h3>
    <p style="font-size: 16px;">
        La gestion des √©v√©nements dans React est une partie essentielle de l'interaction avec l'utilisateur. En utilisant les √©v√©nements React, vous pouvez facilement g√©rer les actions utilisateur tout en conservant un flux de travail d√©claratif et efficace. L'utilisation d'√©v√©nements synth√©tiques, la gestion des √©v√©nements asynchrones, et la possibilit√© de passer des param√®tres personnalis√©s aux gestionnaires rendent React tr√®s puissant pour g√©rer les interactions complexes.
    </p>
</section>

  `,
  styles: [``]
})
export class ReactEvenementComponent  {

}

