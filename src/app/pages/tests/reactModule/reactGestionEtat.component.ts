import { Component } from '@angular/core';

@Component({
  selector: 'app-reactGestionEtat',
  template: `
<h1 style="font-size: 24px;">üöÄ Gestion d'√âtat Complexe</h1>

<section>
    <h2 style="font-size: 20px;">üí° Introduction √† la Gestion d'√âtat Complexe</h2>
    <p style="font-size: 16px;">
        Lorsque vous travaillez avec React, la gestion d'√©tat devient plus complexe lorsque vous devez g√©rer plusieurs √©tats simultan√©ment, ou lorsque l'√©tat est un objet ou un tableau. Vous pouvez rencontrer des sc√©narios o√π l'√©tat √©volue en fonction de plusieurs valeurs ou m√™me de plusieurs sources d'information.
    </p>
    <p style="font-size: 16px;">
        Dans ces cas, vous devrez combiner plusieurs hooks d'√©tat ou bien g√©rer des objets ou des tableaux en tant qu'√©tat pour faciliter la gestion de donn√©es multiples dans un seul composant.
    </p>

    <h3 style="font-size: 16px;">‚öôÔ∏è Utilisation de plusieurs hooks useState</h3>
    <p style="font-size: 16px;">
        Vous pouvez utiliser plusieurs hooks <code>useState()</code> pour g√©rer plusieurs √©tats dans un composant. Chaque hook d'√©tat cr√©e une variable d'√©tat et une fonction de mise √† jour correspondante. Cela peut √™tre utile lorsqu'il existe plusieurs valeurs ind√©pendantes √† suivre.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';

function ComplexState() &#123;
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');

  const increment = () => &#123;
    setCount(count + 1);
  &#125;

  const handleChange = (event) => &#123;
    setName(event.target.value);
  &#125;

  return (
    &#60;div&#62;
      &#60;h2&#62;Compteur: &#123;count&#125;&#60;/h2&#62;
      &#60;button onClick=&#123;increment&#125;&#62;Ajouter 1&#60;/button&#62;
      &#60;input
        type="text"
        value=&#123;name&#125;
        onChange=&#123;handleChange&#125;
        placeholder="Entrez votre nom"
      /&#62;
    &#60;/div&#62;
  &#125;

export default ComplexState;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, nous avons deux √©tats : <code>count</code> et <code>name</code>. Chaque √©tat est g√©r√© ind√©pendamment √† l'aide de <code>useState()</code>.
    </p>

    <h3 style="font-size: 16px;">üõ†Ô∏è Gestion d'un Objet comme √âtat</h3>
    <p style="font-size: 16px;">
        Une autre approche courante consiste √† utiliser un objet pour stocker plusieurs valeurs d'√©tat. Par exemple, si vous avez plusieurs propri√©t√©s qui partagent un √©tat commun, un objet peut √™tre plus facile √† g√©rer et √† mettre √† jour.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';

function ComplexStateWithObject() &#123;
  const [state, setState] = useState(&#123;
    count: 0,
    name: ''
  &#125;);

  const increment = () => &#123;
    setState(prevState => &#123;
      return &#123; ...prevState, count: prevState.count + 1 &#125;;
    &#125;);
  &#125;

  const handleChange = (event) => &#123;
    setState(prevState => &#123;
      return &#123; ...prevState, name: event.target.value &#125;;
    &#125;);
  &#125;

  return (
    &#60;div&#62;
      &#60;h2&#62;Compteur: &#123;state.count&#125;&#60;/h2&#62;
      &#60;button onClick=&#123;increment&#125;&#62;Ajouter 1&#60;/button&#62;
      &#60;input
        type="text"
        value=&#123;state.name&#125;
        onChange=&#123;handleChange&#125;
        placeholder="Entrez votre nom"
      /&#62;
    &#60;/div&#62;
  &#125;

export default ComplexStateWithObject;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, l'√©tat est stock√© dans un seul objet <code>state</code>. Nous utilisons la m√©thode <code>setState()</code> pour mettre √† jour les propri√©t√©s individuelles de cet objet. Il est important de noter l'utilisation de la syntaxe <code>...prevState</code> pour pr√©server les autres propri√©t√©s de l'√©tat.
    </p>

    <h3 style="font-size: 16px;">‚ö° Mise √† Jour d'√âtats Immutables</h3>
    <p style="font-size: 16px;">
        Lors de la mise √† jour d'objets ou de tableaux dans l'√©tat, vous devez toujours veiller √† ne pas modifier directement l'objet ou le tableau existant. React attend une nouvelle r√©f√©rence pour que l'√©tat change, et les modifications directes de l'√©tat peuvent ne pas d√©clencher un nouveau rendu.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
// Mise √† jour de l'√©tat avec un tableau dans l'objet
setState(prevState => &#123;
  return &#123;
    ...prevState,
    items: [...prevState.items, newItem]
  &#125;;
&#125;);

// Mise √† jour de l'√©tat avec un objet dans un tableau
setState(prevState => &#123;
  return &#123;
    ...prevState,
    items: prevState.items.map(item =>
      item.id === id ? &#123; ...item, completed: true &#125; : item
    )
  &#125;;
&#125;);
</code></pre>

    <h3 style="font-size: 16px;">üß† Gestion des √âtats Compl√®tes avec useReducer</h3>
    <p style="font-size: 16px;">
        Dans certains cas, surtout pour les applications avec des √©tats complexes ou des actions multiples, vous pouvez vouloir utiliser le hook <code>useReducer()</code>. Ce hook est une alternative plus puissante √† <code>useState()</code>, car il vous permet de g√©rer l'√©tat de mani√®re centralis√©e et d'utiliser des actions pour le modifier.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useReducer &#125; from 'react';

const initialState = &#123;
  count: 0,
  name: ''
&#125;;

// Fonction reductrice pour g√©rer les actions
function reducer(state, action) &#123;
  switch (action.type) &#123;
    case 'increment':
      return &#123; ...state, count: state.count + 1 &#125;;
    case 'setName':
      return &#123; ...state, name: action.payload &#125;;
    default:
      return state;
  &#125;
&#125;

function ComplexStateWithReducer() &#123;
  const [state, dispatch] = useReducer(reducer, initialState);

  const increment = () => dispatch(&#123; type: 'increment' &#125;);
  const handleChange = (event) => dispatch(&#123; type: 'setName', payload: event.target.value &#125;);

  return (
    &#60;div&#62;
      &#60;h2&#62;Compteur: &#123;state.count&#125;&#60;/h2&#62;
      &#60;button onClick=&#123;increment&#125;&#62;Ajouter 1&#60;/button&#62;
      &#60;input
        type="text"
        value=&#123;state.name&#125;
        onChange=&#123;handleChange&#125;
        placeholder="Entrez votre nom"
      /&#62;
    &#60;/div&#62;
  &#125;

export default ComplexStateWithReducer;
</code></pre>
    <p style="font-size: 16px;">
        Le hook <code>useReducer()</code> est particuli√®rement utile lorsque vous avez un √©tat complexe qui n√©cessite plusieurs sous-valeurs ou lorsque l'√©tat est manipul√© par plusieurs actions. Il fournit une meilleure gestion de l'√©tat centralis√©.
    </p>

    <h3 style="font-size: 16px;">üéØ Conclusion</h3>
    <p style="font-size: 16px;">
        La gestion d'√©tat complexe dans React peut √™tre r√©alis√©e de diff√©rentes mani√®res, en utilisant plusieurs hooks <code>useState()</code>, des objets ou des tableaux, ou m√™me <code>useReducer()</code> pour des cas plus complexes. Il est important de bien structurer votre √©tat pour le rendre plus facile √† maintenir et √† manipuler au fil du temps.
    </p>
</section>

  `,
  styles: [``]
})
export class ReactGestionEtatComponent  {

}

