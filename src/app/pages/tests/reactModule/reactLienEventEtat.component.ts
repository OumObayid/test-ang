import { Component } from '@angular/core';

@Component({
  selector: 'app-reactLienEventEtat',
  template: `
<h1 style="font-size: 24px;">üöÄ Liens entre les √âv√©nements et l'√âtat dans React</h1>

<section>
    <h2 style="font-size: 20px;">üí° Introduction aux Liens entre √âv√©nements et √âtat</h2>
    <p style="font-size: 16px;">
        Dans React, l'√©tat et les √©v√©nements sont souvent √©troitement li√©s. L'√©tat d'un composant d√©finit son apparence, tandis que les √©v√©nements, tels que les clics de bouton ou les entr√©es de texte, peuvent entra√Æner des modifications de cet √©tat. Comprendre comment g√©rer ces interactions est essentiel pour cr√©er des interfaces utilisateur dynamiques et r√©actives.
    </p>
    <p style="font-size: 16px;">
        Les √©v√©nements utilisateur peuvent d√©clencher des modifications de l'√©tat d'un composant. Par exemple, lorsqu'un utilisateur soumet un formulaire, vous pouvez utiliser cet √©v√©nement pour mettre √† jour l'√©tat et afficher un message de succ√®s. Ce lien entre les √©v√©nements et l'√©tat est fondamental dans React pour assurer que l'interface utilisateur refl√®te toujours les donn√©es les plus r√©centes.
    </p>

    <h3 style="font-size: 16px;">üñ±Ô∏è Modifier l'√âtat avec un √âv√©nement</h3>
    <p style="font-size: 16px;">
        La mani√®re la plus simple de lier un √©v√©nement √† l'√©tat est de modifier l'√©tat directement dans le gestionnaire d'√©v√©nements. Cela vous permet de mettre √† jour l'interface utilisateur en r√©ponse aux actions de l'utilisateur.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';

function Counter() &#123;
  const [count, setCount] = useState(0);

  const increment = () => &#123;
    setCount(count + 1);
  &#125;

  return (
    &#60;div&#62;
      &#60;h1&#62;Compteur: &#123;count&#125;&#60;/h1&#62;
      &#60;button onClick=&#123;increment&#125;&#62;Incr√©menter&#60;/button&#62;
    &#60;/div&#62;
  &#125;

export default Counter;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, un √©v√©nement <code>onClick</code> est attach√© √† un bouton. Lorsqu'il est cliqu√©, la fonction <code>increment</code> est appel√©e, ce qui met √† jour l'√©tat du compteur via <code>setCount</code>.
    </p>

    <h3 style="font-size: 16px;">‚öôÔ∏è Lier un Formulaire √† l'√âtat</h3>
    <p style="font-size: 16px;">
        Les formulaires sont une autre situation courante o√π les √©v√©nements et l'√©tat sont li√©s. Vous pouvez suivre les modifications des champs de formulaire avec des √©v√©nements comme <code>onChange</code> et mettre √† jour l'√©tat du composant en cons√©quence.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';

function FormExample() &#123;
  const [name, setName] = useState('');

  const handleChange = (event) => &#123;
    setName(event.target.value);
  &#125;

  const handleSubmit = (event) => &#123;
    event.preventDefault();
    alert('Nom soumis: ' + name);
  &#125;

  return (
    &#60;form onSubmit=&#123;handleSubmit&#125;&#62;
      &#60;input
        type="text"
        value=&#123;name&#125;
        onChange=&#123;handleChange&#125;
        placeholder="Entrez votre nom"
      /&#62;
      &#60;button type="submit"&#62;Soumettre&#60;/button&#62;
    &#60;/form&#62;
  &#125;

export default FormExample;
</code></pre>
    <p style="font-size: 16px;">
        Ici, un √©v√©nement <code>onChange</code> est utilis√© pour suivre les modifications du champ de texte. Chaque fois que l'utilisateur tape quelque chose, l'√©tat du champ <code>name</code> est mis √† jour, ce qui permet de refl√©ter la saisie de l'utilisateur dans l'interface.
    </p>

    <h3 style="font-size: 16px;">‚ö° Modifier l'√âtat √† partir de la Valeur d'un √âv√©nement</h3>
    <p style="font-size: 16px;">
        Il est √©galement possible de modifier l'√©tat en fonction de la valeur d'un √©v√©nement. Par exemple, vous pouvez avoir des formulaires ou des champs de texte o√π l'√©tat du composant est directement mis √† jour avec la valeur de l'√©v√©nement.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';

function TextInput() &#123;
  const [inputValue, setInputValue] = useState('');

  const handleChange = (event) => &#123;
    setInputValue(event.target.value);
  &#125;

  return (
    &#60;div&#62;
      &#60;input
        type="text"
        value=&#123;inputValue&#125;
        onChange=&#123;handleChange&#125;
        placeholder="Tapez quelque chose"
      /&#62;
      &#60;p&#62;Vous avez √©crit: &#123;inputValue&#125;&#60;/p&#62;
    &#60;/div&#62;
  &#125;

export default TextInput;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, chaque fois que l'utilisateur tape quelque chose dans le champ de texte, l'√©tat <code>inputValue</code> est mis √† jour avec la valeur actuelle du champ.
    </p>

    <h3 style="font-size: 16px;">üîÑ Interaction Asynchrone des √âv√©nements avec l'√âtat</h3>
    <p style="font-size: 16px;">
        Lorsque les √©v√©nements impliquent des actions asynchrones, comme la r√©cup√©ration de donn√©es depuis un serveur, vous pouvez √©galement mettre √† jour l'√©tat apr√®s que l'op√©ration asynchrone soit termin√©e. Utilisez des fonctions <code>async</code> et <code>await</code> pour g√©rer ces op√©rations dans vos gestionnaires d'√©v√©nements.
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';

function FetchData() &#123;
  const [data, setData] = useState(null);

  const fetchData = async () => &#123;
    const response = await fetch('https://api.example.com/data');
    const result = await response.json();
    setData(result);
  &#125;

  return (
    &#60;div&#62;
      &#60;button onClick=&#123;fetchData&#125;&#62;Charger les donn√©es&#60;/button&#62;
      &#60;pre&#62;&#123;JSON.stringify(data, null, 2)&#125;&#60;/pre&#62;
    &#60;/div&#62;
  &#125;

export default FetchData;
</code></pre>
    <p style="font-size: 16px;">
        Lorsque l'utilisateur clique sur le bouton, la fonction <code>fetchData</code> est appel√©e, r√©cup√®re des donn√©es depuis une API, puis met √† jour l'√©tat avec ces donn√©es. La mise √† jour de l'√©tat entra√Æne le rendu du composant avec les nouvelles informations.
    </p>

    <h3 style="font-size: 16px;">üéØ Conclusion</h3>
    <p style="font-size: 16px;">
        Lier les √©v√©nements aux modifications d'√©tat est une partie essentielle de la gestion des interactions utilisateur dans React. Lorsque l'√©tat change en r√©ponse aux √©v√©nements, React met automatiquement √† jour le rendu du composant pour refl√©ter ces changements. En combinant la gestion des √©v√©nements et l'√©tat, vous pouvez cr√©er des interfaces utilisateur dynamiques et r√©actives qui r√©pondent rapidement aux actions de l'utilisateur.
    </p>
</section>

  `,
  styles: [``]
})
export class ReactLienEventEtatComponent  {

}

