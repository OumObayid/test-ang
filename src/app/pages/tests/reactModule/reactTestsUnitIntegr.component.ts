import { Component } from '@angular/core';

@Component({
  selector: 'app-reactTestsUnitIntegr',
  template: `
<h1 style="font-size: 24px;">üß™ Tests Unitaires et Tests d'Int√©gration</h1>

<section>
    <h2 style="font-size: 20px;">üí° Qu'est-ce qu'un Test Unitaire ?</h2>
    <p style="font-size: 16px;">
        Un test unitaire v√©rifie une seule "unit√©" fonctionnelle de votre code, g√©n√©ralement une fonction ou un composant React.
        Il permet de s'assurer qu'une fonction renvoie le bon r√©sultat ou qu'un composant se comporte comme pr√©vu lorsqu'il est rendu avec certaines props.
    </p>

    <h2 style="font-size: 20px;">üîß Exemple de Test Unitaire avec Jest</h2>
    <p style="font-size: 16px;">
        Imaginons un composant simple qui affiche un message personnalis√© en fonction des props :
    </p>

    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React from 'react';
import &#123; render &#125; from '&#64;testing-library/react';
import MyComponent from './MyComponent';

test('affiche un message personnalis√©', () => &#123;
  const &#123; getByText &#125; = render(&lt;MyComponent message="Hello, React!" /&gt;);
  const message = getByText(/Hello, React!/i);
  expect(message).toBeInTheDocument();
&#125;);
</code></pre>

    <h2 style="font-size: 20px;">‚öôÔ∏è Explication de l'exemple</h2>
    <p style="font-size: 16px;">
        - On utilise la fonction &#96;render&#96; de **React Testing Library** pour rendre le composant.
        - Ensuite, on recherche un √©l√©ment contenant le texte "Hello, React!" gr√¢ce √† &#96;getByText&#96;.
        - Finalement, on utilise &#96;expect&#96; pour v√©rifier que l'√©l√©ment est bien dans le document.
    </p>

    <h2 style="font-size: 20px;">üîç Qu'est-ce qu'un Test d'Int√©gration ?</h2>
    <p style="font-size: 16px;">
        Un test d'int√©gration v√©rifie que plusieurs composants fonctionnent ensemble correctement.
        Il s'assure que l'ensemble du syst√®me (ou plusieurs composants interagissant ensemble) fonctionne comme pr√©vu, avec une logique de flux d'√©tat et d'interactions entre composants.
    </p>

    <h2 style="font-size: 20px;">‚öôÔ∏è Exemple de Test d'Int√©gration</h2>
    <p style="font-size: 16px;">
        Imaginons que vous ayez un composant de formulaire qui met √† jour un √©tat de message. Vous voulez tester l'int√©gration de ce formulaire avec un autre composant qui affiche ce message :
    </p>

    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';
import &#123; render, fireEvent &#125; from '&#64;testing-library/react';

function MessageForm() &#123;
  const [message, setMessage] = useState('');

  const handleChange = (e) => &#123;
    setMessage(e.target.value);
  &#125;

  return (
    &lt;div&gt;
      &lt;input type="text" onChange=&#123;handleChange&#125; /&gt;
      &lt;p&gt;Le message est : &#123;message&#125;&lt;/p&gt;
    &lt;/div&gt;
  );
&#125;

test('mettre √† jour le message en fonction de la saisie utilisateur', () => &#123;
  const &#123; getByText, getByRole &#125; = render(&lt;MessageForm /&gt;);
  const input = getByRole('textbox');
  fireEvent.change(input, &#123; target: &#123; value: 'Hello, Testing!' &#125; &#125;);
  expect(getByText(/Le message est : Hello, Testing!/i)).toBeInTheDocument();
&#125;);
</code></pre>

    <h2 style="font-size: 20px;">‚öôÔ∏è Explication de l'exemple</h2>
    <p style="font-size: 16px;">
        - Le test v√©rifie que lorsque l'utilisateur entre du texte dans un champ de saisie, le message qui s'affiche est mis √† jour.
        - On utilise &#96;fireEvent.change&#96; pour simuler la saisie utilisateur dans un champ de texte, puis on v√©rifie que le message affich√© a chang√© en cons√©quence.
    </p>

    <h2 style="font-size: 20px;">üìà Conclusion</h2>
    <p style="font-size: 16px;">
        Les tests unitaires et d'int√©gration permettent de garantir le bon fonctionnement de votre application React √† un niveau fonctionnel et d'interaction.
        Les tests unitaires se concentrent sur des unit√©s ind√©pendantes de votre code, tandis que les tests d'int√©gration v√©rifient l'interaction entre plusieurs composants.
    </p>
</section>

  `,
  styles: [``]
})
export class ReactTestsUnitIntegrComponent  {

}

