import { Component } from '@angular/core';

@Component({
  selector: 'app-reactUseState',
  template: `
  <h1 style="font-size: 24px;">üöÄ useState Hook : G√©rer l'√âtat dans React</h1>
  <section>
  <h2 style="font-size: 20px;">üí° Introduction au useState</h2>
    <p style="font-size: 16px;">
        Le hook <code>useState</code> est l'un des hooks les plus utilis√©s dans React. Il permet de g√©rer l'√©tat dans un composant fonctionnel, l√† o√π auparavant, cela √©tait uniquement possible dans les composants de classe. Ce hook permet d'ajouter un √©tat local √† un composant fonctionnel.
    </p>
    <p style="font-size: 16px;">
        Le hook <code>useState</code> retourne une paire de valeurs :
        - La premi√®re valeur est l'√©tat actuel.
        - La seconde valeur est une fonction qui permet de mettre √† jour cet √©tat.
    </p>

    <h3 style="font-size: 16px;">‚öôÔ∏è Syntaxe du Hook useState</h3>
    <p style="font-size: 16px;">
        La syntaxe du hook <code>useState</code> est la suivante :
    </p>
    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
const &#91;state, setState&#93; = useState(initialValue);
</code></pre>

<p style="font-size: 16px;">
        - <code>state</code> : l'√©tat actuel.
        - <code>setState</code> : la fonction pour mettre √† jour cet √©tat.
        - <code>initialValue</code> : la valeur initiale de l'√©tat.
    </p>

    <h3 style="font-size: 16px;">üì¶ Exemple d'utilisation de useState</h3>
    <p style="font-size: 16px;">
        Voici un exemple simple o√π nous utilisons <code>useState</code> pour g√©rer l'√©tat d'un compteur dans un composant React fonctionnel.
    </p>

    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
import React, &#123; useState &#125; from 'react';

function Counter() &#123;
  const &#91;count, setCount&#93; = useState(0);

  const increment = () => &#123;
    setCount(count + 1);
  &#125;

  return &#60;div&#62;
    &#60;h2&#62;Compteur: &#123;count&#125;&#60;/h2&#62;
    &#60;button onClick=&#123;increment&#125;&#62;Ajouter 1&#60;/button&#62;
  &#60;/div&#62;
&#125;

export default Counter;
</code></pre>
<p style="font-size: 16px;">
        Dans cet exemple, le compteur commence √† 0, et chaque fois que le bouton est cliqu√©, la fonction <code>increment</code> met √† jour l'√©tat avec la nouvelle valeur du compteur.
    </p>

    <h3 style="font-size: 16px;">üß† Gestion de l'√âtat avec une Fonction de Mise √† Jour</h3>
    <p style="font-size: 16px;">
        Il est important de noter que la fonction de mise √† jour <code>setState</code> peut aussi recevoir une fonction plut√¥t qu'une valeur directe. Cela est particuli√®rement utile lorsque vous devez acc√©der √† la valeur pr√©c√©dente de l'√©tat pour effectuer des mises √† jour bas√©es sur celle-ci.
    </p>

    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
const &#91;count, setCount&#93; = useState(0);

const increment = () => &#123;
  setCount(prevCount => prevCount + 1);
&#125;
</code></pre>

<p style="font-size: 16px;">
        Dans cet exemple, nous utilisons une fonction qui prend la valeur pr√©c√©dente de l'√©tat (<code>prevCount</code>) pour calculer la nouvelle valeur de l'√©tat.
    </p>

    <h3 style="font-size: 16px;">üîÑ Mise √† Jour Asynchrone de l'√âtat</h3>
    <p style="font-size: 16px;">
        Il est √©galement important de comprendre que la mise √† jour de l'√©tat avec <code>setState</code> est asynchrone. Cela signifie que la valeur de l'√©tat n'est pas imm√©diatement disponible apr√®s l'appel √† <code>setState</code>. Si vous avez besoin de l'√©tat mis √† jour imm√©diatement apr√®s un changement, il peut √™tre pr√©f√©rable d'utiliser un effet secondaire avec le hook <code>useEffect</code>.
    </p>

    <h3 style="font-size: 16px;">‚ö° Mise √† Jour de l'√âtat avec plusieurs Hooks useState</h3>
    <p style="font-size: 16px;">
        Lorsque vous travaillez avec plusieurs morceaux d'√©tat dans un m√™me composant, vous pouvez utiliser plusieurs appels √† <code>useState</code>. Chaque appel √† <code>useState</code> g√®re un morceau d'√©tat distinct.
    </p>


    <pre style="font-size: 16px; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
<code>
function Form() &#123;
  const &#91;name, setName&#93; = useState('');
  const &#91;age, setAge&#93; = useState('');

  const handleSubmit = (event) => &#123;
    event.preventDefault();
    alert(&#96;Nom: $&#123;name&#125;, √Çge: $&#123;age&#125;&#96;);
  &#125;

  return &#60;form onSubmit=&#123;handleSubmit&#125;&#62;
    &#60;input
      type="text"
      value=&#123;name&#125;
      onChange=&#123;(e) => setName(e.target.value)&#125;
      placeholder="Entrez votre nom"
    /&#62;
    &#60;input
      type="number"
      value=&#123;age&#125;
      onChange=&#123;(e) => setAge(e.target.value)&#125;
      placeholder="Entrez votre √¢ge"
    /&#62;
    &#60;button type="submit"&#62;Envoyer&#60;/button&#62;
  &#60;/form&#62;
&#125;
</code></pre>
    <p style="font-size: 16px;">
        Dans cet exemple, nous avons deux morceaux d'√©tat ind√©pendants : <code>name</code> et <code>age</code>. Chacun est g√©r√© par un appel s√©par√© √† <code>useState</code>.
    </p>

    <h3 style="font-size: 16px;">üîß Rappel : Le Hook useState est uniquement pour l'√âtat Local</h3>
    <p style="font-size: 16px;">
        Le hook <code>useState</code> est destin√© √† g√©rer l'√©tat local d'un composant. Si vous devez partager l'√©tat entre plusieurs composants, vous pouvez utiliser des outils comme le <strong>Context API</strong> ou des biblioth√®ques comme <strong>Redux</strong> pour g√©rer l'√©tat global.
    </p>

    <h3 style="font-size: 16px;">üéØ Conclusion</h3>
    <p style="font-size: 16px;">
        Le hook <code>useState</code> est essentiel pour g√©rer l'√©tat dans les composants fonctionnels de React. En utilisant ce hook, vous pouvez cr√©er des applications interactives qui r√©agissent aux actions de l'utilisateur. Il est simple √† utiliser, mais puissant lorsqu'il est combin√© avec d'autres hooks comme <code>useEffect</code> pour g√©rer des effets secondaires.
    </p>

  </section>
  `,
  styles: [``]
})
export class ReactUseStateComponent  {

}

